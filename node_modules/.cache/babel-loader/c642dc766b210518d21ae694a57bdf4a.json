{"ast":null,"code":"var _jsxFileName = \"/Users/nanabaahabekah/Documents/EQ works sample questions/eqworks/src/components/table.js\";\nimport React from 'react';\nimport { Table, Container } from 'semantic-ui-react';\nimport Scroll from './scroll';\n\nconst TableData = ({\n  data\n}) => {\n  //get keys from json for headers\n  const keys = Object.keys(data[0]); //map keys and display as table headers\n\n  const displayHeaders = keys.map((head, i) => {\n    return React.createElement(Table.HeaderCell, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, head);\n  }); // map all objects in data array\n  // map object for values and display as cell on table\n  // find a better way!!!!!!\n\n  const displayBody = data.map((obj, i) => {\n    return React.createElement(Table.Row, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, Object.values(obj).map((val, k) => {\n      return React.createElement(Table.Cell, {\n        key: k,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, val);\n    }));\n  });\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    style: {\n      overflow: 'auto',\n      maxHeight: 200\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Table, {\n    striped: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, displayHeaders)), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, displayBody))));\n};\n\nexport default TableData;","map":{"version":3,"sources":["/Users/nanabaahabekah/Documents/EQ works sample questions/eqworks/src/components/table.js"],"names":["React","Table","Container","Scroll","TableData","data","keys","Object","displayHeaders","map","head","i","displayBody","obj","values","val","k","overflow","maxHeight"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,mBAAjC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAE1B;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,IAAI,CAAC,CAAD,CAAhB,CAAb,CAH0B,CAK1B;;AACA,QAAMG,cAAc,GAAGF,IAAI,CAACG,GAAL,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC1C,WACI,oBAAC,KAAD,CAAO,UAAP;AAAkB,MAAA,GAAG,EAAEA,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BD,IAA5B,CADJ;AAGH,GAJsB,CAAvB,CAN0B,CAY1B;AACA;AACY;;AACZ,QAAME,WAAW,GAAGP,IAAI,CAACI,GAAL,CAAU,CAACI,GAAD,EAAMF,CAAN,KAAY;AACtC,WACI,oBAAC,KAAD,CAAO,GAAP;AAAW,MAAA,GAAG,EAAEA,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQJ,MAAM,CAACO,MAAP,CAAcD,GAAd,EAAmBJ,GAAnB,CAAwB,CAACM,GAAD,EAAMC,CAAN,KAAY;AAChC,aAAO,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,GAAG,EAAEA,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqBD,GAArB,CAAP;AACH,KAFD,CAFR,CADJ;AASH,GAVmB,CAApB;AAYA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAACE,MAAAA,QAAQ,EAAE,MAAX;AAAmBC,MAAAA,SAAS,EAAE;AAA9B,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,OAAO,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKV,cADL,CADJ,CADJ,EAOI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKI,WADL,CAPJ,CADJ,CADJ,CADJ;AAiBH,CA5CD;;AA8CA,eAAeR,SAAf","sourcesContent":["import React from 'react'\nimport { Table, Container } from 'semantic-ui-react'\nimport Scroll from './scroll';\n\nconst TableData = ({data}) => {\n\n    //get keys from json for headers\n    const keys = Object.keys(data[0]);\n\n    //map keys and display as table headers\n    const displayHeaders = keys.map( (head, i) => {\n        return(\n            <Table.HeaderCell key={i} >{head}</Table.HeaderCell>\n        );\n    });\n    \n    // map all objects in data array\n    // map object for values and display as cell on table\n                // find a better way!!!!!!\n    const displayBody = data.map( (obj, i) => {\n        return(\n            <Table.Row key={i}>\n                {\n                    Object.values(obj).map( (val, k) => {\n                        return <Table.Cell key={k}>{val}</Table.Cell>\n                    })\n                }\n            </Table.Row>\n        )\n    });\n\n    return (\n        <Container>\n            <Segment style={{overflow: 'auto', maxHeight: 200 }}>\n                <Table striped>\n                    <Table.Header>\n                        <Table.Row>\n                            {displayHeaders}\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                        {displayBody}\n                    </Table.Body>\n                </Table>\n            </Segment>\n        </Container>\n    );\n}\n\nexport default TableData;"]},"metadata":{},"sourceType":"module"}